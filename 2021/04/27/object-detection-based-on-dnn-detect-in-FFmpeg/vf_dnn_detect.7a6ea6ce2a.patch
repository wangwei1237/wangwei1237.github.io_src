diff --git a/libavfilter/vf_dnn_detect.c b/libavfilter/vf_dnn_detect.c
index 2ae692d62a..02fab1c4c3 100644
--- a/libavfilter/vf_dnn_detect.c
+++ b/libavfilter/vf_dnn_detect.c
@@ -33,6 +33,22 @@
 #include "libavutil/time.h"
 #include "libavutil/avstring.h"
 #include "libavutil/detection_bbox.h"
+#include "libavutil/common.h"
+#include "libavutil/parseutils.h"
+#include "libavutil/colorspace.h"
+
+enum { Y, U, V, A };
+
+typedef struct DrawBoxContext {
+    int x, y, w, h;
+    int thickness;
+    char *color_str;
+    unsigned char yuv_color[4];
+    int invert_color; ///< invert luma color
+    int vsub, hsub;   ///< chroma subsampling
+    int have_alpha;
+    int replace;
+} DrawBoxContext;
 
 typedef struct DnnDetectContext {
     const AVClass *class;
@@ -248,6 +264,81 @@ static int dnn_detect_filter_frame(AVFilterLink *inlink, AVFrame *in)
     return ff_filter_frame(outlink, in);
 }
 
+static av_pure av_always_inline int pixel_belongs_to_box(DrawBoxContext *s, int x, int y)
+{
+    return (y - s->y < s->thickness) || (s->y + s->h - 1 - y < s->thickness) ||
+           (x - s->x < s->thickness) || (s->x + s->w - 1 - x < s->thickness);
+}
+
+static av_cold int init_drawbox_color(AVFilterContext *ctx, DrawBoxContext *s)
+{
+    uint8_t rgba_color[4];
+
+    if (!strcmp(s->color_str, "invert"))
+        s->invert_color = 1;
+    else if (av_parse_color(rgba_color, s->color_str, -1, ctx) < 0)
+        return AVERROR(EINVAL);
+
+    if (!s->invert_color) {
+        s->yuv_color[Y] = RGB_TO_Y_CCIR(rgba_color[0], rgba_color[1], rgba_color[2]);
+        s->yuv_color[U] = RGB_TO_U_CCIR(rgba_color[0], rgba_color[1], rgba_color[2], 0);
+        s->yuv_color[V] = RGB_TO_V_CCIR(rgba_color[0], rgba_color[1], rgba_color[2], 0);
+        s->yuv_color[A] = rgba_color[3];
+    }
+
+    return 0;
+}
+
+static void dnn_detect_drawbox(AVFilterContext *filter_ctx, AVFrame *frame) 
+{
+    AVFrameSideData *sd = av_frame_get_side_data(frame, AV_FRAME_DATA_DETECTION_BBOXES);
+    if (!sd || !(sd->data)) {
+        return;
+    }
+
+    AVDetectionBBoxHeader *header = (AVDetectionBBoxHeader *)sd->data;
+    if (!header || header->nb_bboxes <= 0) {
+        return;
+    }
+
+    AVFilterLink *inlink = filter_ctx->inputs[0];
+    const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(inlink->format);
+    DrawBoxContext s = {
+        .thickness = 2,
+        .vsub = desc->log2_chroma_h,
+        .hsub = desc->log2_chroma_w,
+        .have_alpha = desc->flags & AV_PIX_FMT_FLAG_ALPHA,
+        .color_str = "Red"
+    };
+    init_drawbox_color(filter_ctx, &s);
+
+    AVDetectionBBox *bbox;
+    for (int i = 0; i < header->nb_bboxes; i++) {
+        bbox = av_get_detection_bbox(header, i);
+        s.x = bbox->x, s.y = bbox->y, s.w = bbox->w, s.h = bbox->h;
+        int plane, x, y, yb = bbox->y, xb = bbox->x;
+        unsigned char *row[4];
+
+        for (y = FFMAX(yb, 0); y < frame->height && y < (yb + s.h); y++) {
+            row[0] = frame->data[0] + y * frame->linesize[0];
+
+            for (plane = 1; plane < 3; plane++)
+                row[plane] = frame->data[plane] +
+                    frame->linesize[plane] * (y >> s.vsub);
+
+            for (x = FFMAX(xb, 0); x < xb + s.w && x < frame->width; x++) {
+                double alpha = (double)s.yuv_color[A] / 255;
+
+                if (pixel_belongs_to_box(&s, x, y)) {
+                    row[0][x                 ] = (1 - alpha) * row[0][x                 ] + alpha * s.yuv_color[Y];
+                    row[1][x >> s.hsub] = (1 - alpha) * row[1][x >> 1] + alpha * s.yuv_color[U];
+                    row[2][x >> s.hsub] = (1 - alpha) * row[2][x >> 1] + alpha * s.yuv_color[V];
+                }
+            }
+        }
+    }
+}
+
 static int dnn_detect_activate_sync(AVFilterContext *filter_ctx)
 {
     AVFilterLink *inlink = filter_ctx->inputs[0];
@@ -266,6 +357,7 @@ static int dnn_detect_activate_sync(AVFilterContext *filter_ctx)
             return ret;
         if (ret > 0) {
             ret = dnn_detect_filter_frame(inlink, in);
+            dnn_detect_drawbox(filter_ctx, in);
             if (ret < 0)
                 return ret;
             got_frame = 1;
@@ -349,6 +441,7 @@ static int dnn_detect_activate_async(AVFilterContext *filter_ctx)
         async_state = ff_dnn_get_async_result(&ctx->dnnctx, &in_frame, &out_frame);
         if (out_frame) {
             av_assert0(in_frame == out_frame);
+            dnn_detect_drawbox(filter_ctx, out_frame);
             ret = ff_filter_frame(outlink, out_frame);
             if (ret < 0)
                 return ret;
